/**
 * ==如果类型不同，先转换再比较，注意引用类型到基本类型的转换方向
 * === 若类型不同则false，若类型相同则判断和==相同
 */
console.log(3 === 3);//true
console.log(NaN === NaN);//false
console.log({} === {});//false

/**
 * + 可以将字符串变量连接起来
 * 对字符串和数字进行加法运算
 */
var a = "5" + 5;
console.log(a,typeof a);//55 string

/**当&&  || 两侧的操作数不是布尔类型时，首先将左操作数转换成布尔类型
 * 根据短路原则返回原始左操作数或原始右操作数
 * 
 * 短路原则(忽略对右操作数的判断)
 * 对于&&,转换后的左操作数若为true，则直接返回原始右；否则返回原始左
 * 
 * 对于||，转换后的左操作数若为true,则直接返回原始左；否则返回原始右
 */
console.log((b>90)&&'you' || (b>70)&&'liang' || (b>60)&&'jige' || 'bujige');

/**使用 || 给函数参数设置默认值 */
function fn(a,b,c){
    b = b || 1;
    c = c || 2;
    return a + b + c;
}